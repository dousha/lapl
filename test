# The testing file
# This file contains the 'Standard' test of LAPL
# If anywhere went wrong in the code, e.g. stack overflow, it means
# THERE'S SOMETHING WRONG WITH THIS MATHERFAUQER

# Basic output
(print Hello form LAPL!)
(newline)
# Expects:
# Hello from LAPL!
# Note: `print` function does not insert CRLF automatically
# One have to use `newline` function to break a line

# Basic arithmetic operations
(print (/ (* (+ 1 1) 3) 2))
(newline)
(print (ln 2.71828))
(newline)
(print (/ 0 0))
(newline)
# Expects:
# 3.0
# 0.999... (some number near 1)
# NaN

# Global variable definition and referring
(set! i 15)
(print (+1 i))
(newline)
# Expects:
# 16.0

# `let` operator shadowing
(let i 12.5 (
	(let i 10 ((print $i)))
	(print $i)))
(print $i)
# Expects:
# 10.0
# 12.5
# 15.0

# Function definition and calling
(def (plus-two x) (+ x 2))
(print (plus-two 2))
(newline)
# Expects:
# 4.0

# Currying
(def (g x) (x 5))
(def (h x) (* 2 x))
(print (g h))
(newline)
# Expects:
# 10.0

# Function as formal parameter
(def (f x) (print (x)))
(def (f') (+ 1 1))
(print (f f'))
(newline)
# Expects:
# 2.0

# Passing an anonymous function
# When the function is anonymous, an @ must be prefixed
(def (for from to step @body)
	(let i from (
		(while (< i to) (
			(@body)
			(set! i (+ i step)))))))
(for 0 5 1 ((print (ret i)) (newline)))
# Expects:
# 0.0
# 1.0
# 2.0
# 3.0
# 4.0

# Recursion
(def (factorial x) (if (= x 1) (ret 1) (* x (factorial (- x 1)))))
(print (factorial 5))
(newline)
# Expects:
# 120.0

# Array
(set! arr1 (arr 1 2 i 4 5))
(print (len arr1))
(newline)
(print (read-at arr1 2))
(newline)
(write-at arr1 2 10)
(print (read-at arr1 2))
(newline)
(print (ret i))
(newline)
# Expects:
# 5.0
# 15.0
# 10.0
# 15.0
# Note: This also shows that when creating an array
# The value of an variable is passed in.

# Basic I/O
(set! str1 (arr ""I wish you a good day.", he said."))
# Note: For string literals, there is no need to escape quotes
# since the first quote indicated that the content should be
# treated as string literals
(print $arr1)
(newline)
(print $str1)
(newline)
(if (< 0 (input! str2)) ((print $str2) (drop! str2)) (print Say something please!))
(newline)
# Expects:
# "I wish you a good day.", he said.
# (waits for your input)
# (echo your input, if nothing entered, it complains with `Say something please!`)

# File I/O
(set! file1 (file-open remote-file))
(set! str2 (arr "\_(def (dynamically-written) (print oh boy that's interesting!))"))
(file-seek file1 (file-eof file1))
(file-write! file1 str2)
(print $file1)
(newline)
# Expects:
# (things that you can see in remote-file)

# Evaluating other files and importing functions from there
# Warning: remote file may overwrite functions and variables
# This stuff will be fixed in further versions with `namespace`
# introduced.
(eval remote-file)
(remote-hello)
(newline)
(dynamically-written)
(newline)
# Expects:
# Hello from another file!
# oh boy that's interesting!

# System related stuff
(print (env-var (arr "HOME")))
(newline)

# TEST SUCCESS!
(print test success!)
(newline)
